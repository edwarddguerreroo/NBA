#!/usr/bin/env python3
"""
Test de Integraci√≥n: Predicciones + Bookmakers
==============================================

Script de prueba para demostrar la integraci√≥n completa entre:
1. Predicciones de modelos entrenados (PTS, AST, TRB, 3P, DD, etc.)
2. An√°lisis de odds de bookmakers (Sportradar API)
3. Identificaci√≥n de value bets con ventaja estad√≠stica
4. Recomendaciones de apuestas optimizadas

Este script demuestra el flujo completo del sistema sin necesidad de input manual.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.bookmakers.predictions_integration import PredictionsBookmakersIntegration
from datetime import datetime, timedelta
import json

def test_system_status():
    """
    Prueba el estado del sistema completo.
    """
    print("üîç 1. VERIFICANDO ESTADO DEL SISTEMA")
    print("=" * 50)
    
    try:
        # Inicializar integraci√≥n
        integration = PredictionsBookmakersIntegration()
        
        # Obtener estado del sistema
        status = integration.get_system_status()
        
        print(f"üìä Estado del Sistema:")
        print(f"   ‚Ä¢ Timestamp: {status['timestamp']}")
        print()
        
        # Modelos disponibles
        models = status['models']
        print(f"ü§ñ Modelos:")
        print(f"   ‚Ä¢ Disponibles: {models['total_available']}/{len(models['available'])}")
        print(f"   ‚Ä¢ Cargados: {models['total_loaded']}")
        print()
        
        for target, available in models['available'].items():
            status_emoji = "‚úÖ" if available else "‚ùå"
            loaded_emoji = "üü¢" if target in models['loaded'] else "üî¥"
            print(f"   {status_emoji} {target}: Disponible | {loaded_emoji} Cargado")
        
        print()
        
        # Bookmakers
        bookmakers = status['bookmakers']
        print(f"üè™ Bookmakers:")
        for provider, provider_status in bookmakers.items():
            configured = "‚úÖ" if provider_status.get('configured', False) else "‚ùå"
            accessible = "‚úÖ" if provider_status.get('accessible', False) else "‚ùå"
            print(f"   ‚Ä¢ {provider}: Configurado {configured} | Accesible {accessible}")
        
        print()
        
        # Data Loader
        data_loader = status['data_loader']
        print(f"üìÅ Data Loader:")
        print(f"   ‚Ä¢ Status: {data_loader['status']}")
        print(f"   ‚Ä¢ Paths configurados: {len(data_loader['paths'])}")
        
        print()
        print("‚úÖ VERIFICACI√ìN DE ESTADO COMPLETADA")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en verificaci√≥n de estado: {e}")
        return False

def test_predictions_generation():
    """
    Prueba la generaci√≥n de predicciones.
    """
    print("üéØ 2. GENERANDO PREDICCIONES DE MODELOS")
    print("=" * 50)
    
    try:
        # Inicializar integraci√≥n
        integration = PredictionsBookmakersIntegration()
        
        # Generar predicciones para ma√±ana
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
        print(f"üìÖ Generando predicciones para: {tomorrow}")
        print()
        
        # Generar predicciones (limitadas para prueba)
        predictions = integration.predictor.generate_predictions_for_date(
            date=tomorrow,
            players=None  # Todos los jugadores disponibles
        )
        
        if 'error' in predictions:
            print(f"‚ùå Error en predicciones: {predictions['error']}")
            return False
        
        # Mostrar resumen
        summary = predictions['summary']
        print(f"üìä Resumen de Predicciones:")
        print(f"   ‚Ä¢ Fecha: {predictions['date']}")
        print(f"   ‚Ä¢ Jugadores analizados: {summary['total_players']}")
        print(f"   ‚Ä¢ Modelos utilizados: {len(summary['models_used'])}")
        print()
        
        # Mostrar predicciones por target
        print(f"üéØ Predicciones por Target:")
        for target, count in summary['predictions_by_target'].items():
            print(f"   ‚Ä¢ {target}: {count} predicciones")
        
        print()
        
        # Mostrar ejemplos de predicciones
        print(f"üìã Ejemplos de Predicciones:")
        count = 0
        for target, pred_data in predictions['predictions'].items():
            if 'error' in pred_data or count >= 2:
                continue
            
            # Mostrar top 3 predicciones de este target
            top_predictions = pred_data['predictions'][:3]
            print(f"   üèÄ {target}:")
            
            for pred in top_predictions:
                player = pred['player']
                team = pred['team']
                value = pred['predicted_value']
                confidence = pred['confidence']
                
                print(f"      ‚Ä¢ {player} ({team}): {value:.1f} (conf: {confidence:.1%})")
            
            print()
            count += 1
        
        print("‚úÖ GENERACI√ìN DE PREDICCIONES COMPLETADA")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en generaci√≥n de predicciones: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_market_analysis():
    """
    Prueba el an√°lisis completo predicciones vs mercado.
    """
    print("üìà 3. AN√ÅLISIS PREDICCIONES VS MERCADO")
    print("=" * 50)
    
    try:
        # Inicializar integraci√≥n
        integration = PredictionsBookmakersIntegration()
        
        # Ejecutar an√°lisis completo
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
        print(f"üîç Analizando mercado para: {tomorrow}")
        print()
        
        analysis = integration.analyze_predictions_vs_market(
            date=tomorrow,
            players=None  # Todos los jugadores
        )
        
        if 'error' in analysis:
            print(f"‚ùå Error en an√°lisis: {analysis['error']}")
            return False
        
        # Mostrar resumen del an√°lisis
        stats = analysis['analysis_stats']
        print(f"üìä Estad√≠sticas del An√°lisis:")
        print(f"   ‚Ä¢ Comparaciones realizadas: {stats['total_comparisons']}")
        print(f"   ‚Ä¢ Value bets encontrados: {stats['value_bets_found']}")
        print(f"   ‚Ä¢ Alta confianza: {stats['high_confidence_bets']}")
        print()
        
        # Mostrar recomendaciones
        recommendations = analysis['recommendations']
        print(f"üí° Recomendaciones:")
        print(f"   ‚Ä¢ {recommendations['message']}")
        print()
        
        if recommendations.get('top_recommendations'):
            print(f"üèÜ Top Recomendaciones:")
            for rec in recommendations['top_recommendations'][:3]:
                player = rec['player']
                target = rec['target']
                bet_type = rec['bet_type']
                line = rec['line']
                edge = rec['edge']
                confidence = rec['confidence']
                risk = rec['risk_level']
                
                print(f"   {rec['rank']}. {player} - {target} {bet_type} {line}")
                print(f"      Edge: {edge} | Confianza: {confidence} | Riesgo: {risk}")
                print(f"      {rec['reasoning']}")
                print()
        
        # Portfolio advice
        portfolio = recommendations.get('portfolio_advice', {})
        if portfolio:
            print(f"üíº Consejos de Portfolio:")
            print(f"   ‚Ä¢ Asignaci√≥n total recomendada: {portfolio.get('recommended_allocation', 'N/A')}")
            print(f"   ‚Ä¢ Diversificaci√≥n: {portfolio.get('diversification_score', 0)} jugadores")
            
            risk_dist = portfolio.get('risk_distribution', {})
            print(f"   ‚Ä¢ Distribuci√≥n de riesgo:")
            print(f"     - Bajo: {risk_dist.get('low_risk', 0)}")
            print(f"     - Medio: {risk_dist.get('medium_risk', 0)}")
            print(f"     - Alto: {risk_dist.get('high_risk', 0)}")
            print()
        
        print("‚úÖ AN√ÅLISIS DE MERCADO COMPLETADO")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en an√°lisis de mercado: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_report_export():
    """
    Prueba la exportaci√≥n de reportes.
    """
    print("üìÑ 4. EXPORTACI√ìN DE REPORTES")
    print("=" * 50)
    
    try:
        # Inicializar integraci√≥n
        integration = PredictionsBookmakersIntegration()
        
        # Ejecutar an√°lisis primero
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
        analysis = integration.analyze_predictions_vs_market(date=tomorrow)
        
        if 'error' in analysis:
            print(f"‚ö†Ô∏è  Saltando exportaci√≥n - Error en an√°lisis: {analysis['error']}")
            return False
        
        # Exportar reporte
        report_path = integration.export_analysis_report()
        
        print(f"üìÅ Reporte exportado: {report_path}")
        
        # Verificar que el archivo existe
        if os.path.exists(report_path):
            file_size = os.path.getsize(report_path)
            print(f"   ‚Ä¢ Tama√±o: {file_size} bytes")
            print(f"   ‚Ä¢ Formato: JSON")
            
            # Mostrar estructura del reporte
            with open(report_path, 'r', encoding='utf-8') as f:
                report_data = json.load(f)
            
            print(f"   ‚Ä¢ Secciones: {list(report_data.keys())}")
            print()
            
            print("‚úÖ EXPORTACI√ìN DE REPORTE COMPLETADA")
            return True
        else:
            print(f"‚ùå Archivo de reporte no encontrado: {report_path}")
            return False
        
    except Exception as e:
        print(f"‚ùå ERROR en exportaci√≥n de reporte: {e}")
        return False

def main():
    """
    Funci√≥n principal del test.
    """
    print("üèÄ TEST DE INTEGRACI√ìN PREDICCIONES + BOOKMAKERS")
    print("=" * 60)
    print(f"üìÖ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Ejecutar todas las pruebas
    tests = [
        ("Estado del Sistema", test_system_status),
        ("Generaci√≥n de Predicciones", test_predictions_generation),
        ("An√°lisis de Mercado", test_market_analysis),
        ("Exportaci√≥n de Reportes", test_report_export)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"üîÑ Ejecutando: {test_name}")
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå ERROR CR√çTICO en {test_name}: {e}")
            results.append((test_name, False))
        
        print()
        print("-" * 60)
        print()
    
    # Resumen final
    print("üìã RESUMEN DE PRUEBAS")
    print("=" * 30)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if success:
            passed += 1
    
    print()
    print(f"üìä Resultado: {passed}/{len(results)} pruebas exitosas")
    
    if passed == len(results):
        print("üéâ TODAS LAS PRUEBAS PASARON - SISTEMA LISTO")
        print()
        print("üí° El sistema est√° listo para:")
        print("   ‚Ä¢ Generar predicciones autom√°ticamente")
        print("   ‚Ä¢ Obtener odds en tiempo real")
        print("   ‚Ä¢ Identificar value bets")
        print("   ‚Ä¢ Generar recomendaciones optimizadas")
        print("   ‚Ä¢ Exportar reportes completos")
    else:
        print("‚ö†Ô∏è  ALGUNAS PRUEBAS FALLARON - REVISAR CONFIGURACI√ìN")
        print()
        print("üîß Posibles soluciones:")
        print("   ‚Ä¢ Verificar que los modelos est√©n entrenados")
        print("   ‚Ä¢ Comprobar configuraci√≥n de Sportradar API")
        print("   ‚Ä¢ Validar rutas de datos")
        print("   ‚Ä¢ Revisar logs para errores espec√≠ficos")
    
    return passed == len(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 