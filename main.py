"""
Sistema de Predicciones NBA - Punto de Entrada Principal
======================================================

Sistema avanzado de machine learning para predicci√≥n de estad√≠sticas NBA
con integraci√≥n automatizada de APIs de casas de apuestas.

Caracter√≠sticas:
- Predicciones automatizadas de PTS, AST, TRB, 3P, double_double
- Integraci√≥n con Sportradar para odds en tiempo real
- Procesamiento automatizado sin input manual
- Arquitectura modular y escalable
"""

import logging
import sys
from datetime import datetime
from typing import Dict, Any

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/main.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


def test_automated_odds_integration():
    """
    Prueba la integraci√≥n automatizada de odds sin necesidad de especificar
    event_id ni date manualmente.
    """
    print("=== PRUEBA DE INTEGRACI√ìN AUTOMATIZADA ===")
    print("Sin especificar event_id ni date - TODO AUTOM√ÅTICO")
    print()
    
    try:
        # Importar la integraci√≥n automatizada
        from utils.bookmakers.bookmakers_integration import AutomatedBookmakersIntegration
        
        # Inicializar
        print("1. Inicializando integraci√≥n automatizada...")
        integration = AutomatedBookmakersIntegration()
        print("   ‚úì Integraci√≥n lista")
        print()
        
        # Escaneo r√°pido
        print("2. Escaneo r√°pido del mercado...")
        quick_scan = integration.quick_market_scan(game_limit=3)
        
        if 'error' not in quick_scan:
            print(f"   ‚úì Partidos verificados: {quick_scan['games_checked']}")
            print(f"   ‚úì Con odds disponibles: {quick_scan['summary']['total_with_odds']}")
        else:
            print(f"   ‚ö† Error en escaneo: {quick_scan['error']}")
        print()
        
        # Datos para predicciones autom√°ticos
        print("3. Obteniendo datos autom√°ticos para predicciones...")
        predictions_data = integration.get_ready_to_predict_data(max_games=5, days_ahead=3)
        
        if 'error' not in predictions_data:
            auto_info = predictions_data.get('automation_info', {})
            print(f"   ‚úì Partidos encontrados: {auto_info.get('games_found', 0)}")
            print(f"   ‚úì Con odds disponibles: {auto_info.get('games_with_odds', 0)}")
            print(f"   ‚úì M√©todo: {auto_info.get('method', 'N/A')}")
            print(f"   ‚úì Autom√°tico: {not auto_info.get('requires_manual_input', True)}")
        else:
            print(f"   ‚ö† Error: {predictions_data['error']}")
        print()
        
        # Mostrar ejemplos de partidos
        if 'games' in predictions_data and predictions_data['games']:
            print("4. Ejemplos de partidos encontrados autom√°ticamente:")
            count = 0
            for game_id, game_data in predictions_data['games'].items():
                if count >= 2:
                    break
                    
                teams = game_data.get('teams', {})
                date = game_data.get('date', 'N/A')
                has_odds = game_data.get('has_odds', False)
                
                print(f"   ‚Ä¢ {teams.get('away', 'TBD')} @ {teams.get('home', 'TBD')}")
                print(f"     üìÖ Fecha: {date}")
                print(f"     üéØ Odds: {'Disponibles' if has_odds else 'No disponibles'}")
                print(f"     üÜî ID: {game_id}")
                print()
                count += 1
        
        print("‚úÖ PROCESO AUTOMATIZADO COMPLETADO")
        print("   Todos los datos se obtuvieron sin input manual")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("   Verifica que las dependencias est√©n instaladas")
        return False
    except Exception as e:
        print(f"‚ùå Error en prueba automatizada: {e}")
        return False


def test_sportradar_direct():
    """
    Prueba directa de la API de Sportradar con m√©todos automatizados.
    """
    print("=== PRUEBA DIRECTA API SPORTRADAR ===")
    print("M√©todos automatizados sin event_id/date manual")
    print()
    
    try:
        from utils.bookmakers.sportradar_api import SportradarAPI
        
        # Inicializar API
        print("1. Inicializando API Sportradar...")
        api = SportradarAPI()
        print("   ‚úì API lista")
        print()
        
        # Pr√≥ximos partidos autom√°tico
        print("2. Obteniendo pr√≥ximos partidos autom√°ticamente...")
        next_games = api.get_next_nba_games(days_ahead=3, max_games=5)
        
        if 'error' not in next_games:
            print(f"   ‚úì Partidos encontrados: {next_games['total_found']}")
            print(f"   ‚úì Periodo: {next_games['search_period']['start_date']} a {next_games['search_period']['end_date']}")
        else:
            print(f"   ‚ö† Error: {next_games['error']}")
        print()
        
        # Odds autom√°ticas
        print("3. Obteniendo odds autom√°ticamente...")
        auto_odds = api.get_odds_for_next_games(days_ahead=2, max_games=3)
        
        if 'error' not in auto_odds:
            summary = auto_odds.get('summary', {})
            print(f"   ‚úì Partidos procesados: {summary.get('games_processed', 0)}")
            print(f"   ‚úì Con odds: {summary.get('games_with_odds', 0)}")
        else:
            print(f"   ‚ö† Error: {auto_odds['error']}")
        print()
        
        # Verificaci√≥n r√°pida
        print("4. Verificaci√≥n r√°pida...")
        quick_check = api.quick_odds_check(game_limit=2)
        
        if 'error' not in quick_check:
            print(f"   ‚úì Partidos verificados: {quick_check['games_checked']}")
            print(f"   ‚úì Odds disponibles: {quick_check['summary']['has_live_odds']}")
        else:
            print(f"   ‚ö† Error: {quick_check['error']}")
        print()
        
        print("‚úÖ PRUEBA DIRECTA COMPLETADA")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba directa: {e}")
        return False


def main():
    """
    Funci√≥n principal del sistema.
    """
    print("üèÄ SISTEMA DE PREDICCIONES NBA")
    print("===============================")
    print(f"üìÖ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Ejecutar pruebas automatizadas
    print("üîÑ EJECUTANDO PRUEBAS AUTOMATIZADAS")
    print("Verificando integraci√≥n de odds sin input manual...")
    print()
    
    # Prueba de integraci√≥n automatizada
    integration_success = test_automated_odds_integration()
    print()
    print("-" * 50)
    print()
    
    # Prueba directa de API
    api_success = test_sportradar_direct()
    print()
    print("-" * 50)
    print()
    
    # Resumen final
    print("üìã RESUMEN DE PRUEBAS")
    print(f"   Integraci√≥n automatizada: {'‚úÖ OK' if integration_success else '‚ùå FALLO'}")
    print(f"   API directa automatizada: {'‚úÖ OK' if api_success else '‚ùå FALLO'}")
    print()
    
    if integration_success and api_success:
        print("üéâ SISTEMA LISTO PARA USAR")
        print("   Puedes obtener odds autom√°ticamente sin especificar event_id ni date")
        print()
        print("üìñ M√âTODOS DISPONIBLES:")
        print("   ‚Ä¢ integration.get_ready_to_predict_data() - Datos listos para predicciones")
        print("   ‚Ä¢ integration.quick_market_scan() - Escaneo r√°pido del mercado")
        print("   ‚Ä¢ api.get_automated_predictions_data() - Proceso completamente automatizado")
        print("   ‚Ä¢ api.get_next_nba_games() - Pr√≥ximos partidos autom√°ticamente")
        print("   ‚Ä¢ api.get_odds_for_next_games() - Odds autom√°ticas")
        print("   ‚Ä¢ api.quick_odds_check() - Verificaci√≥n r√°pida")
    else:
        print("‚ö†Ô∏è  ALGUNOS COMPONENTES REQUIEREN ATENCI√ìN")
        print("   Revisa los logs para m√°s detalles")
    
    print()
    print("üèÅ PROCESO COMPLETADO")


if __name__ == "__main__":
    main() 